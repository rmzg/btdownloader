#!/usr/bin/perl 

use strict;
use warnings;
use feature 'current_sub';

open STDERR, ">", "/tmp/btlogs" or die $!;

use IO::Async::Loop;
use IO::Async::Process;
use Tickit::Async;

use Tickit::Widgets qw/Box HBox VBox Static Border Frame Button/;
use Tickit::Widget::Table::Paged;
use Tickit::Widget::Progressbar::Horizontal;

my $HOST = 'rt.rmz.gs';
my $WIDTH = 100;
my $HEIGHT = 40;
my $RSYNC_COUNTER = 0;

my $ROOT = Tickit::Widget::Frame->new( style => { linetype => 'single' } );
my $box = Tickit::Widget::Box->new( child_cols => $WIDTH, child_lines => $HEIGHT, child => $ROOT );

####
####

my @files = get_file_list();
display_file_list(@files);

my $LOOP = IO::Async::Loop->new;
my $TICKIT = Tickit::Async->new( root => $box );
$LOOP->add( $TICKIT );
$TICKIT->run;

#####################
# ---------------------------------------------------------------------------------
#####################

sub get_file_list {
	my @output = map [split( /\s+/, trim($_), 2)],  ssh( 'du -hsL rt/done/*' );

	for( @output ) {
		if( $_->[0] =~/G/ ) {
			$_->[2] = [ map trim(), ssh( "ls -d \Q$_->[1]\E/*" )];
		}
	}

	return @output;
}

sub display_file_list {
	my @files = @_;

	my $table = Tickit::Widget::Table::Paged->new( multi_select => 1 );
	$table->{row_offset} = 0;

	$table->add_column( label => 'Id', align => 'left', width => 3 );
	$table->add_column( label => 'File', align => 'left', );
	$table->add_column( label => 'Size', width => 15, align => 'right' );


	my $index = 0;
	for( @files ) {
		my $name = (split'/',$_->[1])[-1];
		$name = substr $name, 0, $WIDTH-20;
		$name =~ s/[\r\n\t]//g;
		$table->add_row( $index++, $name, $_->[0] ) 
	}

	my $vbox = Tickit::Widget::VBox->new;
	$vbox->add( $table, expand => 1 );

	my $button_box = Tickit::Widget::HBox->new;
	my $select = Tickit::Widget::Button->new( 
		label => "Submit", 
		bg => 254, 
		on_click => sub { 
			my @row_ids = map $_->[0], $table->selected_rows;

			download_files( @files[@row_ids] );
		}
	);
	my $cancel = Tickit::Widget::Button->new( label => "Cancel", bg => 254, on_click => sub { exit } );

	$button_box->add( Tickit::Widget::Box->new( child_cols => 26, child => $select ), expand => 1, );
	$button_box->add( Tickit::Widget::Box->new( child_cols => 26, child => $cancel ), expand => 1, );

	$vbox->add( $button_box );

	$ROOT->set_child( $vbox );
}

sub download_files {
	my @files = map { $_->[2] ? @{$_->[2]} : $_->[1] } @_;

	my $vbox = Tickit::Widget::VBox->new;
	$ROOT->set_child( $vbox );

	my $callback = sub {
		my( $oldwidget, $oldfile, $exit ) = @_;

		if( $oldwidget ) { 
			$vbox->remove( $oldwidget ); $RSYNC_COUNTER--; 

			my( $file_root ) = $oldfile =~ m{(/?rt/done/[^/]+)};

			if( $exit == 0 and not grep /\Q$file_root/, @files ) {
				$LOOP->fork( code => sub {
					system( 'ssh', $HOST, 'rm', '-f', quotemeta $file_root );
				});
			}

		}
		if( not @files ) {
			if( $RSYNC_COUNTER == 0 ) { exit; }
			return;
		}

		my $file = shift @files;

		my( $widget, $process ) = create_rsync( $file, __SUB__ );
		$RSYNC_COUNTER++;

		$vbox->add( $widget );
		$LOOP->add( $process );
	};

	for( 0 .. 4 ) { 
		$callback->();
	}
}

sub ssh {
	return `ssh $HOST '$_[0]'`
}

sub trim {
	my $s = $_[0] // $_;
	$s =~ s/^\s+//;
	$s =~ s/\s+$//;
	return $s;
}

sub create_rsync {
	my( $file, $cb ) = @_;

	my $title = substr( (split'/',$file)[-1], 0, ( $WIDTH - 10 ) );
		$title =~ s/[\r\n\t]//g;

	my $progress = Tickit::Widget::Progressbar::Horizontal->new( completion => 0 );

	my $sframe = Tickit::Widget::Frame->new( title => $title, child => $progress, style => { linetype => 'single' } );
	my $sbox = Tickit::Widget::Box->new( child_cols => '100%', child_lines => 3, child => $sframe );
	my $pvbox = Tickit::Widget::VBox->new;

	$pvbox->add( $sbox );

	my $static = Tickit::Widget::Static->new( text => "---" );
	$pvbox->add( $static );

	my( $output_dir ) = $file =~ m{^/?rt/done/([^/]+)};
	mkdir $output_dir;
	my $process = IO::Async::Process->new(
		command => [qw/rsync --progress --size-only -rvzL/, "$HOST:'$file'", "$output_dir/"],
		on_finish => sub { 
			my( $process, $exit ) = @_;


			$cb->($pvbox, $file, $exit);
		},
		stdout => {
			on_read => sub {
				my( $stream, $buffer ) = @_;
				my $text = $$buffer;
				$$buffer="";
				$text =~ s/^\s+//;
				$text =~ s/\s+$//;

				return unless length $text > 1;

				my $status = substr( $text, 0, ( $WIDTH - 10 ) );
					$status =~ s/[\r\n\t]//g;
				$static->set_text( $status );

				if( $text =~ /(\d+)%/ ) { 
					$progress->completion( $1/100 );
				}
			}
		}
	);
	return( $pvbox, $process );
}
